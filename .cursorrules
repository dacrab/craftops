# Minecraft Mod Manager - Cursor Rules

## Project Structure
- `minecraft_mod_manager/` - Main package directory
  - `__init__.py` - Package initialization with version info
  - `minecraft_mod_manager.py` - Core application logic
  - `config/` - Configuration handling
    - `config.py` - Config dataclasses
    - `config.toml` - Default settings
  - `managers/` - Core functionality
    - `mod.py` - Mod management
    - `notification.py` - Discord notifications
    - `backup.py` - Backup handling
  - `controllers/` - Server control
    - `server.py` - Server management
  - `utils/` - Utilities
    - `constants.py` - Global constants
    - `toml_utils.py` - TOML handling

## Dependencies
### Production
- aiohttp>=3.9.1 - Async HTTP client
- requests>=2.31.0 - HTTP client
- tqdm>=4.66.1 - Progress bars

### Development
- pytest>=7.4.3 - Testing
- pytest-cov>=4.1.0 - Coverage
- pytest-asyncio>=0.23.2 - Async testing
- ruff>=0.1.6 - Linting
- mypy>=1.7.1 - Type checking
- build>=1.0.3 - Package building
- twine>=4.0.2 - Package publishing

## Code Style
1. Use type hints with Python 3.9+ syntax
2. Maximum line length: 100 characters
3. Use relative imports within package
4. Use dataclasses for data structures
5. Use async/await for HTTP and I/O
6. Use pathlib.Path for file operations
7. Use f-strings for string formatting
8. Follow PEP 8 naming conventions
9. Include docstrings for all modules/classes

## Type Checking
1. Use TypedDict for API responses
2. Use Final for constants
3. Use NotRequired for optional fields
4. Use cast() for type narrowing
5. Use Protocol for interfaces
6. Use strict mypy settings

## Error Handling
1. Use specific exception types
2. Include error context in messages
3. Use exception chaining with raise from
4. Log errors with tracebacks
5. Implement proper cleanup in finally blocks

## Async Guidelines
1. Use aiohttp for HTTP requests
2. Implement connection pooling
3. Handle rate limiting
4. Use proper timeouts
5. Clean up resources in __aexit__

## Testing
1. Write pytest tests
2. Use pytest-asyncio for async tests
3. Maintain coverage above 80%
4. Mock external dependencies
5. Test both success and error cases

## Configuration
1. Use TOML for config files
2. Use dataclasses for config
3. Support environment overrides
4. Validate config on load
5. Handle paths securely

## Logging
1. Use structured logging
2. Include context in messages
3. Configure proper log levels
4. Use rotating file handlers
5. Log to both file and console

## Build and Package
1. Use pyproject.toml for metadata
2. Include package data in MANIFEST.in
3. Support wheel and sdist formats
4. Build single-file executable
5. Include default config file