name: Release

on:
  workflow_call:
    inputs:
      force-release:
        description: "Force a release even if no changes detected"
        required: false
        default: false
        type: boolean
  workflow_dispatch:
    inputs:
      release-type:
        description: 'Type of release'
        required: true
        default: 'auto'
        type: choice
        options:
          - auto
          - patch
          - minor
          - major

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: false

env:
  GO_VERSION: "1.21"

jobs:
  release:
    name: Semantic Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write
      packages: write
    outputs:
      new-release-published: ${{ steps.semantic-release.outputs.new-release-published }}
      new-release-version: ${{ steps.semantic-release.outputs.new-release-version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Setup Node.js for semantic-release
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install semantic-release
        run: |
          npm install -g \
            semantic-release \
            @semantic-release/git \
            @semantic-release/github \
            @semantic-release/changelog \
            conventional-changelog-conventionalcommits

      - name: Create .releaserc.json
        run: |
          cat > .releaserc.json << 'EOF'
          {
            "branches": ["main"],
            "plugins": [
              ["@semantic-release/commit-analyzer", {
                "preset": "conventionalcommits"
              }],
              ["@semantic-release/release-notes-generator", {
                "preset": "conventionalcommits"
              }],
              ["@semantic-release/changelog", {
                "changelogFile": "CHANGELOG.md"
              }],
              ["@semantic-release/github", {
                "assets": [
                  {"path": "dist/craftops-linux-amd64", "label": "Linux AMD64 Binary"},
                  {"path": "dist/craftops-linux-arm64", "label": "Linux ARM64 Binary"},
                  {"path": "dist/craftops-darwin-amd64", "label": "macOS AMD64 Binary"},
                  {"path": "dist/craftops-darwin-arm64", "label": "macOS ARM64 Binary"},
                  {"path": "dist/SHA256SUMS", "label": "Checksums"}
                ]
              }],
              ["@semantic-release/git", {
                "assets": ["CHANGELOG.md"],
                "message": "chore(release): ${nextRelease.version} [skip ci]\n\n${nextRelease.notes}"
              }]
            ]
          }
          EOF

      - name: Setup Go environment
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Run semantic release (dry run first)
        id: semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Run semantic-release to determine if there should be a release
          npx semantic-release --dry-run > release-output.txt 2>&1 || true
          
          if grep -q "The next release version is" release-output.txt; then
            VERSION=$(grep "The next release version is" release-output.txt | cut -d' ' -f6)
            echo "new-release-published=true" >> $GITHUB_OUTPUT
            echo "new-release-version=$VERSION" >> $GITHUB_OUTPUT
            echo "New release will be: $VERSION"
          else
            echo "new-release-published=false" >> $GITHUB_OUTPUT
            echo "No release will be published"
            exit 0
          fi

  build-release:
    name: Build Release Binaries
    runs-on: ubuntu-latest
    needs: release
    if: needs.release.outputs.new-release-published == 'true'
    strategy:
      matrix:
        target:
          - os: linux
            arch: amd64
          - os: linux
            arch: arm64
          - os: darwin
            arch: amd64
          - os: darwin
            arch: arm64
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Go environment
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Build binary
        env:
          GOOS: ${{ matrix.target.os }}
          GOARCH: ${{ matrix.target.arch }}
          CGO_ENABLED: 0
        run: |
          mkdir -p dist
          BINARY_NAME="craftops-${{ matrix.target.os }}-${{ matrix.target.arch }}"
          VERSION="${{ needs.release.outputs.new-release-version }}"
          
          go build \
            -trimpath \
            -ldflags="-s -w -X craftops/internal/cli.Version=${VERSION}" \
            -o "dist/${BINARY_NAME}" \
            ./cmd/craftops

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-${{ matrix.target.os }}-${{ matrix.target.arch }}
          path: dist/
          retention-days: 1

  publish-release:
    name: Publish Release
    runs-on: ubuntu-latest
    needs: [release, build-release]
    if: needs.release.outputs.new-release-published == 'true'
    permissions:
      contents: write
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install semantic-release
        run: |
          npm install -g \
            semantic-release \
            @semantic-release/git \
            @semantic-release/github \
            @semantic-release/changelog \
            conventional-changelog-conventionalcommits

      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Organize release files
        run: |
          mkdir -p dist
          find artifacts/ -name "craftops-*" -type f -exec cp {} dist/ \;
          ls -la dist/

      - name: Generate checksums
        run: |
          cd dist
          sha256sum craftops-* > SHA256SUMS
          cat SHA256SUMS

      - name: Create .releaserc.json
        run: |
          cat > .releaserc.json << 'EOF'
          {
            "branches": ["main"],
            "plugins": [
              ["@semantic-release/commit-analyzer", {
                "preset": "conventionalcommits"
              }],
              ["@semantic-release/release-notes-generator", {
                "preset": "conventionalcommits"
              }],
              ["@semantic-release/changelog", {
                "changelogFile": "CHANGELOG.md"
              }],
              ["@semantic-release/github", {
                "assets": [
                  {"path": "dist/craftops-linux-amd64", "label": "Linux AMD64 Binary"},
                  {"path": "dist/craftops-linux-arm64", "label": "Linux ARM64 Binary"},
                  {"path": "dist/craftops-darwin-amd64", "label": "macOS AMD64 Binary"},
                  {"path": "dist/craftops-darwin-arm64", "label": "macOS ARM64 Binary"},
                  {"path": "dist/SHA256SUMS", "label": "Checksums"}
                ]
              }],
              ["@semantic-release/git", {
                "assets": ["CHANGELOG.md"],
                "message": "chore(release): ${nextRelease.version} [skip ci]\n\n${nextRelease.notes}"
              }]
            ]
          }
          EOF

      - name: Run semantic release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npx semantic-release

      - name: Update install script
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VERSION: ${{ needs.release.outputs.new-release-version }}
        run: |
          # Update the version in install.sh if it exists
          if [ -f install.sh ]; then
            sed -i "s/VERSION=.*/VERSION=\"${VERSION}\"/" install.sh
            git config --global user.name 'github-actions[bot]'
            git config --global user.email 'github-actions[bot]@users.noreply.github.com'
            git add install.sh
            git commit -m "chore: update install script to version ${VERSION} [skip ci]" || true
            git push || true
          fi