name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to create (e.g., v1.0.0)'
        required: true
        type: string

env:
  GO_VERSION: '1.21'

jobs:
  build:
    name: Build Binaries
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
            suffix: linux-amd64
          - goos: linux
            goarch: arm64
            suffix: linux-arm64
          - goos: darwin
            goarch: amd64
            suffix: darwin-amd64
          - goos: darwin
            goarch: arm64
            suffix: darwin-arm64

    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Get dependencies
      run: go mod download
      
    - name: Get version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "VERSION=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
        else
          echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi
        
    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        CGO_ENABLED: 0
      run: |
        VERSION=${{ steps.version.outputs.VERSION }}
        BINARY_NAME="craftops-${{ matrix.suffix }}"
        
        go build \
          -trimpath \
          -ldflags "-X main.Version=${VERSION#v} -s -w" \
          -o "dist/${BINARY_NAME}" \
          ./cmd/craftops
          
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: binary-${{ matrix.suffix }}
        path: dist/

  create-release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts/
        
    - name: Prepare release files
      run: |
        mkdir -p dist
        find artifacts/ -name "craftops-*" -type f -exec cp {} dist/ \;
        ls -la dist/
        
    - name: Get version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "VERSION=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
        else
          echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi
        
    - name: Create checksums
      run: |
        cd dist
        sha256sum * > checksums.txt
        
    - name: Generate release notes
      id: release_notes
      run: |
        VERSION=${{ steps.version.outputs.VERSION }}
        cat > release_notes.md << EOF
        # CraftOps ${VERSION}
        
        ## ðŸš€ Installation
        
        ### Quick Install (Linux/macOS)
        \`\`\`bash
        # Download and install
        curl -L https://github.com/${{ github.repository }}/releases/download/${VERSION}/craftops-linux-amd64 -o craftops
        chmod +x craftops
        sudo mv craftops /usr/local/bin/
        
        # No aliases needed - craftops is short and memorable
        
        # Initialize configuration
        craftops init-config
        \`\`\`
        
        ### Manual Installation
        1. Download the appropriate binary for your platform
        2. Make it executable: \`chmod +x craftops-*\`
        3. Move to PATH: \`sudo mv craftops-* /usr/local/bin/craftops\`
        4. Create aliases (optional):
           - \`sudo ln -sf /usr/local/bin/craftops /usr/local/bin/craftops\`
           - \`sudo ln -sf /usr/local/bin/craftops /usr/local/bin/minecraft-mod-updater\`
        
        ## ðŸ“‹ Available Binaries
        
        | Platform | Architecture | Binary |
        |----------|-------------|---------|
        | Linux | x64 | craftops-linux-amd64 |
        | Linux | ARM64 | craftops-linux-arm64 |
        | macOS | x64 | craftops-darwin-amd64 |
        | macOS | ARM64 | craftops-darwin-arm64 |
        
        ## ðŸŽ® Quick Start
        
        \`\`\`bash
        # Initialize configuration
        craftops init-config
        
        # Edit your configuration
        nano config.toml
        
        # Run health check
        craftops health-check
        
        # Update mods
        craftops update-mods
        
        # Server management
        craftops server start
        craftops server stop
        craftops server restart
        craftops server status
        
        # Backup management
        craftops backup create
        craftops backup list
        \`\`\`
        
        ## ðŸ”§ Configuration
        
        After installation, run \`craftops init-config\` to create a default configuration file, then edit it with your server details:
        
        - Server paths
        - Mod sources (Modrinth)
        - Discord webhook for notifications
        - Backup settings
        - Java flags and server settings
        
        ## âœ… Verification
        
        \`\`\`bash
        # Verify installation
        craftops --version
        craftops --help
        
        # Check system health
        craftops health-check
        \`\`\`
        
        ## ðŸ“¦ Docker
        
        \`\`\`bash
        docker run --rm -v /path/to/config:/config ghcr.io/${{ github.repository }}:${VERSION} --help
        \`\`\`
        EOF
        
        echo "RELEASE_NOTES<<EOF" >> $GITHUB_OUTPUT
        cat release_notes.md >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
    - name: Create or update tag
      if: github.event_name == 'workflow_dispatch'
      run: |
        VERSION=${{ steps.version.outputs.VERSION }}
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git tag -a "${VERSION}" -m "Release ${VERSION}"
        git push origin "${VERSION}"
        
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.version.outputs.VERSION }}
        name: CraftOps ${{ steps.version.outputs.VERSION }}
        body: ${{ steps.release_notes.outputs.RELEASE_NOTES }}
        files: |
          dist/*
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  docker:
    name: Build and Push Docker Image
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Get version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "VERSION=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
        else
          echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi
        
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: |
          ghcr.io/${{ github.repository }}:latest
          ghcr.io/${{ github.repository }}:${{ steps.version.outputs.VERSION }}
        build-args: |
          VERSION=${{ steps.version.outputs.VERSION }}
        cache-from: type=gha
        cache-to: type=gha,mode=max