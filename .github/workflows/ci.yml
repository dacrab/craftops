name: Continuous Integration

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  GO_VERSION: "1.21"

jobs:
  # Go module validation and dependency verification
  validate:
    name: Validate Go Modules
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Go environment
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Verify go.mod and go.sum are up to date
        run: |
          go mod tidy
          if [ -n "$(git status --porcelain go.mod go.sum)" ]; then
            echo "go.mod or go.sum is not up to date. Run 'go mod tidy' and commit changes."
            git diff go.mod go.sum
            exit 1
          fi

      - name: Verify dependencies
        run: go mod verify

      - name: Download dependencies
        run: go mod download

  # Enhanced testing with multiple Go versions and coverage
  test:
    name: Test
    runs-on: ubuntu-latest
    needs: validate
    strategy:
      matrix:
        go-version: ["1.21", "1.22"]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Go environment
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go-version }}
          cache: true

      - name: Download dependencies
        run: go mod download

      - name: Run tests with race detection
        run: go test -race -coverprofile=coverage.out -covermode=atomic ./...

      - name: Generate coverage report
        run: go tool cover -html=coverage.out -o coverage.html

      - name: Check test coverage
        run: |
          COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print substr($3, 1, length($3)-1)}')
          echo "Total coverage: ${COVERAGE}%"
          if (( $(echo "$COVERAGE < 70" | bc -l) )); then
            echo "Coverage is below 70%"
            exit 1
          fi

      - name: Upload coverage to Codecov
        if: matrix.go-version == '1.21'
        uses: codecov/codecov-action@v4
        with:
          file: coverage.out
          flags: unittests
          name: codecov-umbrella

      - name: Upload coverage artifacts
        if: matrix.go-version == '1.21'
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.html

  # Comprehensive linting and static analysis
  lint:
    name: Lint and Static Analysis
    runs-on: ubuntu-latest
    needs: validate
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Go environment
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v8
        with:
          version: latest
          args: --timeout=5m --config=.golangci.yml

      - name: Run go vet
        run: go vet ./...

      - name: Run go fmt check
        run: |
          if [ -n "$(gofmt -l .)" ]; then
            echo "Code is not properly formatted. Run 'go fmt ./...' to fix."
            gofmt -l .
            exit 1
          fi

      - name: Check for inefficient assignments
        run: |
          go install github.com/gordonklaus/ineffassign@latest
          ineffassign ./...

      - name: Check for unused variables
        run: |
          go install github.com/kisielk/errcheck@latest
          errcheck ./...

      - name: Run staticcheck
        run: |
          go install honnef.co/go/tools/cmd/staticcheck@latest
          staticcheck ./...

  # Cross-platform build verification
  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [validate, test, lint]
    strategy:
      matrix:
        target:
          - os: linux
            arch: amd64
          - os: linux
            arch: arm64
          - os: darwin
            arch: amd64
          - os: darwin
            arch: arm64
          - os: windows
            arch: amd64
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Go environment
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Download dependencies
        run: go mod download

      - name: Build binary
        env:
          GOOS: ${{ matrix.target.os }}
          GOARCH: ${{ matrix.target.arch }}
          CGO_ENABLED: 0
        run: |
          BINARY_NAME="craftops"
          if [ "${{ matrix.target.os }}" = "windows" ]; then
            BINARY_NAME="${BINARY_NAME}.exe"
          fi
          
          go build \
            -trimpath \
            -ldflags="-s -w -X craftops/internal/cli.Version=dev" \
            -o "${BINARY_NAME}" \
            ./cmd/craftops

      - name: Verify binary (Linux/macOS)
        if: matrix.target.os != 'windows' && matrix.target.arch == 'amd64' && matrix.target.os == 'linux'
        run: |
          chmod +x ./craftops
          ./craftops --version
          ./craftops --help

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: craftops-${{ matrix.target.os }}-${{ matrix.target.arch }}
          path: craftops*
          retention-days: 7
