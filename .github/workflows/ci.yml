name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  GO_VERSION: "1.21"

jobs:
  # Phase 1: Validation and Setup
  validate:
    name: Validate & Setup
    runs-on: ubuntu-latest
    outputs:
      go-version: ${{ env.GO_VERSION }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Go environment
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Verify go.mod and go.sum
        run: |
          go mod tidy
          if [ -n "$(git status --porcelain go.mod go.sum)" ]; then
            echo "go.mod or go.sum is not up to date. Run 'go mod tidy' and commit changes."
            git diff go.mod go.sum
            exit 1
          fi

      - name: Download and verify dependencies
        run: |
          go mod download
          go mod verify

  # Phase 2: Quality Checks (runs in parallel)
  lint-and-format:
    name: Lint & Format
    runs-on: ubuntu-latest
    needs: validate
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Go environment
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v6
        with:
          version: latest
          args: --timeout=5m

      - name: Check formatting
        run: |
          if [ -n "$(gofmt -l .)" ]; then
            echo "Code is not properly formatted:"
            gofmt -l .
            echo "Run 'go fmt ./...' to fix formatting"
            exit 1
          fi

      - name: Run go vet
        run: go vet ./...

      - name: Install and run additional linters
        run: |
          go install github.com/gordonklaus/ineffassign@latest
          go install github.com/kisielk/errcheck@latest
          go install honnef.co/go/tools/cmd/staticcheck@latest
          
          ineffassign ./...
          errcheck ./...
          staticcheck ./...

  test:
    name: Test
    runs-on: ubuntu-latest
    needs: validate
    strategy:
      matrix:
        go-version: ["1.21", "1.22"]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Go environment
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}
          cache: true

      - name: Download dependencies
        run: go mod download

      - name: Run tests with race detection
        run: go test -race -coverprofile=coverage.out -covermode=atomic ./...

      - name: Check test coverage
        if: matrix.go-version == '1.21'
        run: |
          COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print substr($3, 1, length($3)-1)}')
          echo "Total coverage: ${COVERAGE}%"
          if (( $(echo "$COVERAGE < 70" | bc -l) )); then
            echo "Coverage is below 70%"
            exit 1
          fi

      - name: Upload coverage to Codecov
        if: matrix.go-version == '1.21'
        uses: codecov/codecov-action@v4
        with:
          file: coverage.out
          flags: unittests

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: validate
    permissions:
      security-events: write
      actions: read
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Go environment
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Run Trivy scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run govulncheck
        run: |
          go install golang.org/x/vuln/cmd/govulncheck@latest
          govulncheck ./...

  # Phase 3: Build (only after all quality checks pass)
  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [validate, lint-and-format, test, security]
    strategy:
      matrix:
        target:
          - os: linux
            arch: amd64
          - os: linux
            arch: arm64
          - os: darwin
            arch: amd64
          - os: darwin
            arch: arm64
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Go environment
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Build binary
        env:
          GOOS: ${{ matrix.target.os }}
          GOARCH: ${{ matrix.target.arch }}
          CGO_ENABLED: 0
        run: |
          BINARY_NAME="craftops"
          go build \
            -trimpath \
            -ldflags="-s -w -X craftops/internal/cli.Version=dev-${GITHUB_SHA::8}" \
            -o "${BINARY_NAME}" \
            ./cmd/craftops

      - name: Test binary (Linux AMD64 only)
        if: matrix.target.os == 'linux' && matrix.target.arch == 'amd64'
        run: |
          chmod +x ./craftops
          ./craftops --version
          ./craftops --help

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: craftops-${{ matrix.target.os }}-${{ matrix.target.arch }}
          path: craftops
          retention-days: 7

  # Phase 4: Success notification
  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs: [build]
    if: always() && needs.build.result == 'success'
    steps:
      - name: Report success
        run: echo "âœ… All CI checks passed successfully!"